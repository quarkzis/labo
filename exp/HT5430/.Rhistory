desviaciones <- tapply(res$residuals, Localidad, sd)
max(desviaciones)/min(desviaciones)
tapply(res$residuals, Asistencia, sd)
tapply(res$residuals, Localidad, sd)
max(desviaciones)/min(desviaciones)
library( "IRkernel" ) IRkernel::installspec()
library( "IRkernel" )
IRkernel::installspec()
install.packages( "data.table", dependencies= TRUE )
install.packages( "Matrix", dependencies= TRUE )
install.packages( "Hmisc", dependencies= TRUE )
install.packages( "rlist", dependencies= TRUE )
install.packages( "yaml", dependencies= TRUE )
install.packages("yaml", dependencies = TRUE)
install.packages( "parallel", dependencies= TRUE )
install.packages( "primes", dependencies= TRUE )
install.packages( "bit64", dependencies= TRUE )
install.packages( "IRdisplay", dependencies= TRUE )
install.packages( "repr", dependencies= TRUE )
install.packages( "bioplot", dependencies= TRUE )
install.packages( "DT", dependencies= TRUE )
install.packages( "ROCR", dependencies= TRUE )
install.packages( "R.utils", dependencies= TRUE )
install.packages( "Rcpp", dependencies= TRUE )
install.packages( "devtools", dependencies= TRUE )
install.packages( "ggplot2", dependencies= TRUE )
install.packages( "gganimate", dependencies= TRUE )
install.packages( "transformr", dependencies= TRUE )
install.packages( "DiagrammeR", dependencies= TRUE )
install.packages( "rpart", dependencies= TRUE )
install.packages( "rpart.plot", dependencies= TRUE )
install.packages( "treeClust", dependencies= TRUE )
install.packages( "ranger", dependencies= TRUE )
install.packages( "randomForest", dependencies= TRUE )
install.packages( "xgboost", dependencies= TRUE )
install.packages( "lightgbm", dependencies= TRUE )
install.packages( "DiceKriging", dependencies= TRUE )
install.packages( "mlrMBO", dependencies= TRUE )
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
library( "IRkernel" )
IRkernel::installspec()
quit()
install.packages("installr", dependencies = TRUE)
library(installr)
updateR()
installed. packages()
installed. packages()
installed.packages()
install.packages( "data.table", dependencies= TRUE )
install.packages( "Matrix", dependencies= TRUE )
library("Matrix")
library("caca")
library("data.table")
library("xgboost")
install.packages( "xgboost", dependencies= TRUE )
library("xgboost")
install.packages( "Hmisc", dependencies= TRUE )
install.packages( "rlist", dependencies= TRUE )
install.packages( "yaml", dependencies= TRUE )
install.packages("yaml", dependencies = TRUE)
install.packages("parallel", dependencies = TRUE)
install.packages("primes", dependencies = TRUE)
install.packages("bit64", dependencies = TRUE)
install.packages("IRdisplay", dependencies = TRUE)
install.packages("repr", dependencies = TRUE)
install.packages("bioplot", dependencies = TRUE)
install.packages("vioplot", dependencies = TRUE)
install.packages("DT", dependencies = TRUE)
install.packages("ROCR", dependencies = TRUE)
install.packages("R.utils", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("dectools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("gganimate", dependencies = TRUE)
install.packages("transformr", dependencies = TRUE)
install.packages("DiagrammeR", dependencies = TRUE)
install.packages("rpart", dependencies = TRUE)
install.packages("rpart.plot", dependencies = TRUE)
install.packages("treeClust", dependencies = TRUE)
install.packages("ranger", dependencies = TRUE)
install.packages("randomForest", dependencies = TRUE)
install.packages("lightgbm", dependencies = TRUE)
install.packages("DiceKriging", dependencies = TRUE)
install.packages("mlrMBO", dependencies = TRUE)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
library( "IRkernel" )
IRkernel::installspec()
quit()
install.packages("caret")
#Se utiliza el algoritmo Random Forest, creado por Leo Breiman en el año 2001
#Una libreria que implementa Rando Forest se llama  ranger
#La libreria esta implementada en lenguaje C y corre en paralelo, utiliza TODOS los nucleos del procesador
#Leo Breiman provenia de la estadistica y tenia "horror a los nulos", con lo cual el algoritmo necesita imputar nulos antes
#limpio la memoria
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\ITBA\\Mineria\\")   #Establezco el Working Directory
#cargo los datos donde entreno
dtrain  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, ¿por que le temias a los nulos?
dtrain  <- na.roughfix( dtrain )
#cargo los datos donde aplico el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv", stringsAsFactors= TRUE)
dapply[ , clase_ternaria := NULL ]  #Elimino esta columna que esta toda en NA
dapply  <- na.roughfix( dapply )  #tambien imputo los nulos en los datos donde voy a aplicar el modelo
#genero el modelo de Random Forest con la libreria ranger
#notar como la suma de muchos arboles contrarresta el efecto de min.node.size=1
param  <- list( "num.trees"=       450,  #cantidad de arboles
"mtry"=             33,  #cantidad de variables que evalua para hacer un split  sqrt(ncol(dtrain))
"min.node.size"=  1700,  #tamaño minimo de las hojas
"max.depth"=        12   # 0 significa profundidad infinita
)
set.seed(102191) #Establezco la semilla aleatoria
#para preparar la posibilidad de asignar pesos a las clases
#la teoria de  Maite San Martin
setorder( dtrain, clase_ternaria )  #primero quedan los BAJA+1, BAJA+2, CONTINUA
#genero el modelo de Random Forest llamando a ranger()
modelo  <- ranger( formula= "clase_ternaria ~ .",
data=  dtrain,
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
#,class.weights= c( 1,60, 1)  #siguiendo con la idea de Maite San Martin
)
#aplico el modelo recien creado a los datos del futuro
prediccion  <- predict( modelo, dapply )
#Genero la entrega para Kaggle
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.numeric(prediccion$predictions[ ,"BAJA+2" ] > 1/60) ) ) #genero la salida
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA2411/", showWarnings = FALSE )
archivo_salida  <- "./labo/exp/KA2411/KA_411_001.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep="," )
#Se utiliza el algoritmo Random Forest, creado por Leo Breiman en el año 2001
#Una libreria que implementa Rando Forest se llama  ranger
#La libreria esta implementada en lenguaje C y corre en paralelo, utiliza TODOS los nucleos del procesador
#Leo Breiman provenia de la estadistica y tenia "horror a los nulos", con lo cual el algoritmo necesita imputar nulos antes
#limpio la memoria
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\ITBA\\Mineria\\")   #Establezco el Working Directory
#cargo los datos donde entreno
dtrain  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, ¿por que le temias a los nulos?
dtrain  <- na.roughfix( dtrain )
#cargo los datos donde aplico el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv", stringsAsFactors= TRUE)
dapply[ , clase_ternaria := NULL ]  #Elimino esta columna que esta toda en NA
dapply  <- na.roughfix( dapply )  #tambien imputo los nulos en los datos donde voy a aplicar el modelo
#genero el modelo de Random Forest con la libreria ranger
#notar como la suma de muchos arboles contrarresta el efecto de min.node.size=1
param  <- list( "num.trees"=       400,  #cantidad de arboles
"mtry"=             32,  #cantidad de variables que evalua para hacer un split  sqrt(ncol(dtrain))
"min.node.size"=  1900,  #tamaño minimo de las hojas
"max.depth"=        12   # 0 significa profundidad infinita
)
set.seed(102191) #Establezco la semilla aleatoria
#para preparar la posibilidad de asignar pesos a las clases
#la teoria de  Maite San Martin
setorder( dtrain, clase_ternaria )  #primero quedan los BAJA+1, BAJA+2, CONTINUA
#genero el modelo de Random Forest llamando a ranger()
modelo  <- ranger( formula= "clase_ternaria ~ .",
data=  dtrain,
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
#,class.weights= c( 1,60, 1)  #siguiendo con la idea de Maite San Martin
)
#aplico el modelo recien creado a los datos del futuro
prediccion  <- predict( modelo, dapply )
#Genero la entrega para Kaggle
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.numeric(prediccion$predictions[ ,"BAJA+2" ] > 1/60) ) ) #genero la salida
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA2411/", showWarnings = FALSE )
archivo_salida  <- "./labo/exp/KA2411/KA_411_001.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep="," )
# vCPU  8,    RAM  16GB,   Espacio en Disco  256 GB
# Este script esta pensado para correr en Google Cloud
# Optimizacion Bayesiana de hiperparametros de  lightgbm, con el metodo TRADICIONAL de los hiperparametros originales de lightgbm
# 5-fold cross validation
# la probabilidad de corte es un hiperparametro
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("lightgbm")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
#Aqui se cargan los hiperparametros
hs <- makeParamSet(
makeNumericParam("learning_rate",    lower=  0.01 , upper=    0.3),
makeNumericParam("feature_fraction", lower=  0.2  , upper=    1.0),
makeIntegerParam("min_data_in_leaf", lower=  0    , upper= 8000),
makeIntegerParam("num_leaves",       lower= 16L   , upper= 1024L),
makeNumericParam("prob_corte",       lower= 1/120 , upper=  1/20)  #esto sera visto en clase en gran detalle
)
ksemilla_azar  <- 102191  #Aqui poner la propia semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./exp/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#esta funcion calcula internamente la ganancia de la prediccion probs
fganancia_logistic_lightgbm   <- function( probs, datos)
{
vlabels  <- get_field(datos, "label")
gan  <- sum( (probs > PROB_CORTE  ) *
ifelse( vlabels== 1, 59000, -1000 ) )
return( list( "name"= "ganancia",
"value"=  gan,
"higher_better"= TRUE ) )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales, la semilla del mal ...
EstimarGanancia_lightgbm  <- function( x )
{
gc()  #libero memoria
#llevo el registro de la iteracion por la que voy
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
PROB_CORTE <<- x$prob_corte   #asigno la variable global
kfolds  <- 5   # cantidad de folds para cross validation
param_basicos  <- list( objective= "binary",
metric= "custom",
first_metric_only= TRUE,
boost_from_average= TRUE,
feature_pre_filter= FALSE,
verbosity= -100,
seed= 999983,
max_depth=  -1,         # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split= 0.0, #por ahora, lo dejo fijo
lambda_l1= 0.0,         #por ahora, lo dejo fijo
lambda_l2= 0.0,         #por ahora, lo dejo fijo
max_bin= 31,            #por ahora, lo dejo fijo
num_iterations= 9999,    #un numero muy grande, lo limita early_stopping_rounds
force_row_wise= TRUE    #para que los alumnos no se atemoricen con tantos warning
)
#el parametro discolo, que depende de otro
param_variable  <- list(  early_stopping_rounds= as.integer(50 + 5/x$learning_rate) )
param_completo  <- c( param_basicos, param_variable, x )
set.seed( 999983 )
modelocv  <- lgb.cv( data= dtrain,
eval= fganancia_logistic_lightgbm,
stratified= TRUE, #sobre el cross validation
nfold= kfolds,    #folds del cross validation
param= param_completo,
verbose= -100
)
#obtengo la ganancia
ganancia  <- unlist(modelocv$record_evals$valid$ganancia$eval)[ modelocv$best_iter ]
ganancia_normalizada  <-  ganancia* kfolds     #normailizo la ganancia
#el lenguaje R permite asignarle ATRIBUTOS a cualquier variable
attr(ganancia_normalizada ,"extras" )  <- list("num_iterations"= modelocv$best_iter)  #esta es la forma de devolver un parametro extra
param_completo$num_iterations <- modelocv$best_iter  #asigno el mejor num_iterations
param_completo["early_stopping_rounds"]  <- NULL     #elimino de la lista el componente  "early_stopping_rounds"
#logueo
xx  <- param_completo
xx$ganancia  <- ganancia_normalizada   #le agrego la ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui empieza el programa
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\ITBA\\Mineria\\")   #Establezco el Working Directory
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("./datasets/paquete_premium_202011.csv.gz")
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./exp/",  showWarnings = FALSE )
dir.create( "./exp/HT5430/", showWarnings = FALSE )
setwd("./exp/HT5430/")   #Establezco el Working Directory DEL EXPERIMENTO
#en estos archivos quedan los resultados
kbayesiana  <- "HT543.RDATA"
klog        <- "HT543.txt"
GLOBAL_iteracion  <- 0   #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#paso la clase a binaria que tome valores {0,1}  enteros
dataset[ , clase01 := ifelse( clase_ternaria=="BAJA+2", 1L, 0L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase_ternaria","clase01") )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ , campos_buenos, with=FALSE]),
label= dataset$clase01 )
#Aqui comienza la configuracion de la Bayesian Optimization
funcion_optimizar  <- EstimarGanancia_lightgbm   #la funcion que voy a maximizar
configureMlr( show.learner.output= FALSE)
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar, #la funcion que voy a maximizar
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,     #definido al comienzo del programa
has.simple.signature = FALSE   #paso los parametros en una lista
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)  #se graba cada 600 segundos
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )   #cantidad de iteraciones
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI() )
#establezco la funcion que busca el maximo
surr.km  <- makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if( !file.exists( kbayesiana ) ) {
run  <- mbo(obj.fun, learner= surr.km, control= ctrl)
} else {
run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista
}
# vCPU  8,    RAM  16GB,   Espacio en Disco  256 GB
# Este script esta pensado para correr en Google Cloud
# Optimizacion Bayesiana de hiperparametros de  lightgbm, con el metodo TRADICIONAL de los hiperparametros originales de lightgbm
# 5-fold cross validation
# la probabilidad de corte es un hiperparametro
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("lightgbm")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
#Aqui se cargan los hiperparametros
hs <- makeParamSet(
makeNumericParam("learning_rate",    lower=  0.01 , upper=    0.3),
makeNumericParam("feature_fraction", lower=  0.2  , upper=    1.0),
makeIntegerParam("min_data_in_leaf", lower=  0    , upper= 8000),
makeIntegerParam("num_leaves",       lower= 16L   , upper= 1024L),
makeNumericParam("prob_corte",       lower= 1/120 , upper=  1/20)  #esto sera visto en clase en gran detalle
)
ksemilla_azar  <- 102191  #Aqui poner la propia semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./exp/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#esta funcion calcula internamente la ganancia de la prediccion probs
fganancia_logistic_lightgbm   <- function( probs, datos)
{
vlabels  <- get_field(datos, "label")
gan  <- sum( (probs > PROB_CORTE  ) *
ifelse( vlabels== 1, 59000, -1000 ) )
return( list( "name"= "ganancia",
"value"=  gan,
"higher_better"= TRUE ) )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales, la semilla del mal ...
EstimarGanancia_lightgbm  <- function( x )
{
gc()  #libero memoria
#llevo el registro de la iteracion por la que voy
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
PROB_CORTE <<- x$prob_corte   #asigno la variable global
kfolds  <- 5   # cantidad de folds para cross validation
param_basicos  <- list( objective= "binary",
metric= "custom",
first_metric_only= TRUE,
boost_from_average= TRUE,
feature_pre_filter= FALSE,
verbosity= -100,
seed= 999983,
max_depth=  -1,         # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split= 0.0, #por ahora, lo dejo fijo
lambda_l1= 0.0,         #por ahora, lo dejo fijo
lambda_l2= 0.0,         #por ahora, lo dejo fijo
max_bin= 31,            #por ahora, lo dejo fijo
num_iterations= 9999,    #un numero muy grande, lo limita early_stopping_rounds
force_row_wise= TRUE    #para que los alumnos no se atemoricen con tantos warning
)
#el parametro discolo, que depende de otro
param_variable  <- list(  early_stopping_rounds= as.integer(50 + 5/x$learning_rate) )
param_completo  <- c( param_basicos, param_variable, x )
set.seed( 999983 )
modelocv  <- lgb.cv( data= dtrain,
eval= fganancia_logistic_lightgbm,
stratified= TRUE, #sobre el cross validation
nfold= kfolds,    #folds del cross validation
param= param_completo,
verbose= -100
)
#obtengo la ganancia
ganancia  <- unlist(modelocv$record_evals$valid$ganancia$eval)[ modelocv$best_iter ]
ganancia_normalizada  <-  ganancia* kfolds     #normailizo la ganancia
#el lenguaje R permite asignarle ATRIBUTOS a cualquier variable
attr(ganancia_normalizada ,"extras" )  <- list("num_iterations"= modelocv$best_iter)  #esta es la forma de devolver un parametro extra
param_completo$num_iterations <- modelocv$best_iter  #asigno el mejor num_iterations
param_completo["early_stopping_rounds"]  <- NULL     #elimino de la lista el componente  "early_stopping_rounds"
#logueo
xx  <- param_completo
xx$ganancia  <- ganancia_normalizada   #le agrego la ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui empieza el programa
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\ITBA\\Mineria\\")   #Establezco el Working Directory
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("./datasets/paquete_premium_202011.csv")
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./exp/",  showWarnings = FALSE )
dir.create( "./exp/HT5430/", showWarnings = FALSE )
setwd("./exp/HT5430/")   #Establezco el Working Directory DEL EXPERIMENTO
#en estos archivos quedan los resultados
kbayesiana  <- "HT543.RDATA"
klog        <- "HT543.txt"
GLOBAL_iteracion  <- 0   #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#paso la clase a binaria que tome valores {0,1}  enteros
dataset[ , clase01 := ifelse( clase_ternaria=="BAJA+2", 1L, 0L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase_ternaria","clase01") )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ , campos_buenos, with=FALSE]),
label= dataset$clase01 )
#Aqui comienza la configuracion de la Bayesian Optimization
funcion_optimizar  <- EstimarGanancia_lightgbm   #la funcion que voy a maximizar
configureMlr( show.learner.output= FALSE)
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar, #la funcion que voy a maximizar
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,     #definido al comienzo del programa
has.simple.signature = FALSE   #paso los parametros en una lista
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)  #se graba cada 600 segundos
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )   #cantidad de iteraciones
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI() )
#establezco la funcion que busca el maximo
surr.km  <- makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if( !file.exists( kbayesiana ) ) {
run  <- mbo(obj.fun, learner= surr.km, control= ctrl)
} else {
run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista
}
